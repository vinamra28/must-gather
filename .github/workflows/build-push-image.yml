# This workflow will perform a build and push of
# the image whenever there a code merge happens.
name: Build and Push
on:
  push:
    # branches:
    #   - main
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *" # every day at midnight

env:
  IMAGE_NAME: must-gather
  IMAGE_REGISTRY: quay.io
  IMAGE_TAGS: "4.8"

jobs:
  build-and-push:
    name: Build and push image to Quay.io
    runs-on: ubuntu-latest
    steps:
      # Checkout must-gather github repository
      - name: Checkout must-gather repo
        uses: actions/checkout@v2

      # Login to redhat registry in order to pull the image
      # - name: Login to redhat registry
      #   uses: redhat-actions/podman-login@v1
      #   with:
      #     username: "${{ secrets.REDHAT_REGISTRY_USER }}"
      #     password: "${{ secrets.REDHAT_REGISTRY_PASSWORD }}"
      #     registry: ${{ secrets.REDHAT_IMAGE_REGISTRY }}

      # Build image using Buildah action
      # - name: Build Image
      #   id: build_image
      #   uses: redhat-actions/buildah-build@v2
      #   with:
      #     image: ${{ env.IMAGE_NAME }}
      #     tags: ${{ env.IMAGE_TAGS }}
      #     dockerfiles: ./Dockerfile
      # - name: docker
      #   run: docker login ${{ secrets.REDHAT_IMAGE_REGISTRY }} -u "${{ secrets.REDHAT_REGISTRY_USER }}" -p "${{ secrets.REDHAT_REGISTRY_PASSWORD }}"

      - name: Login to redhat Container Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REDHAT_IMAGE_REGISTRY }}
          username: "${{ secrets.REDHAT_REGISTRY_USER }}"
          password: "${{ secrets.REDHAT_REGISTRY_PASSWORD }}"
      # Build image using Buildah action
      - name: Build Image
        id: build_image
        uses: redhat-actions/buildah-build@v2
        with:
          image: ${{ env.IMAGE_NAME }}
          tags: ${{ env.IMAGE_TAGS }}
          dockerfiles: ./Dockerfile

      # Push the image to Quay.io (Image Registry)
      - name: Push To Quay
        uses: redhat-actions/push-to-registry@v2
        id: push
        with:
          image: ${{ steps.build_image.outputs.image }}
          tags: ${{ steps.build_image.outputs.tags }}
          registry: ${{ env.IMAGE_REGISTRY }}/${{ secrets.REGISTRY_REPO }}
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - name: Echo outputs
        run: |
          echo "${{ toJSON(steps.push.outputs) }}"
